{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _a = config.count,\n      count = _a === void 0 ? Infinity : _a,\n      delay = config.delay,\n      _b = config.resetOnSuccess,\n      resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function () {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAT,QAAwB,cAAxB;AAEA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AA4EA,OAAM,SAAUC,KAAV,CAAmBC,aAAnB,EAAiE;EAA9C;IAAAA;EAA8C;;EACrE,IAAIC,MAAJ;;EACA,IAAID,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;IACtDC,MAAM,GAAGD,aAAT;EACD,CAFD,MAEO;IACLC,MAAM,GAAG;MACPC,KAAK,EAAEF;IADA,CAAT;EAGD;;EACO,SAAoEC,MAAM,MAA1E;EAAA,SAAK,mBAAGE,QAAH,GAAWC,EAAhB;EAAA,IAAkBC,KAAK,GAA6CJ,MAAM,MAA1E;EAAA,IAAyBK,KAA2CL,MAAM,eAA1E;EAAA,IAAyCM,cAAc,mBAAG,KAAH,GAAQD,EAA/D;EAER,OAAOJ,KAAK,IAAI,CAAT,GACHN,QADG,GAEHF,OAAO,CAAC,UAACc,MAAD,EAASC,UAAT,EAAmB;IACzB,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIC,QAAJ;;IACA,IAAMC,iBAAiB,GAAG;MACxB,IAAIC,SAAS,GAAG,KAAhB;MACAF,QAAQ,GAAGH,MAAM,CAACM,SAAP,CACTnB,wBAAwB,CACtBc,UADsB,EAEtB,UAACM,KAAD,EAAM;QAEJ,IAAIR,cAAJ,EAAoB;UAClBG,KAAK,GAAG,CAAR;QACD;;QACDD,UAAU,CAACO,IAAX,CAAgBD,KAAhB;MACD,CARqB,EAUtBE,SAVsB,EAWtB,UAACC,GAAD,EAAI;QACF,IAAIR,KAAK,KAAKR,KAAd,EAAqB;UAEnB,IAAMiB,OAAK,GAAG;YACZ,IAAIR,QAAJ,EAAc;cACZA,QAAQ,CAACS,WAAT;cACAT,QAAQ,GAAG,IAAX;cACAC,iBAAiB;YAClB,CAJD,MAIO;cACLC,SAAS,GAAG,IAAZ;YACD;UACF,CARD;;UAUA,IAAIR,KAAK,IAAI,IAAb,EAAmB;YAIjB,IAAMgB,QAAQ,GAAG,OAAOhB,KAAP,KAAiB,QAAjB,GAA4BR,KAAK,CAACQ,KAAD,CAAjC,GAA2CP,SAAS,CAACO,KAAK,CAACa,GAAD,EAAMR,KAAN,CAAN,CAArE;YACA,IAAMY,oBAAkB,GAAG3B,wBAAwB,CACjDc,UADiD,EAEjD;cAIEa,oBAAkB,CAACF,WAAnB;cACAD,OAAK;YACN,CARgD,EASjD;cAGEV,UAAU,CAACc,QAAX;YACD,CAbgD,CAAnD;YAeAF,QAAQ,CAACP,SAAT,CAAmBQ,oBAAnB;UACD,CArBD,MAqBO;YAELH,OAAK;UACN;QACF,CArCD,MAqCO;UAGLV,UAAU,CAACe,KAAX,CAAiBN,GAAjB;QACD;MACF,CAtDqB,CADf,CAAX;;MA0DA,IAAIL,SAAJ,EAAe;QACbF,QAAQ,CAACS,WAAT;QACAT,QAAQ,GAAG,IAAX;QACAC,iBAAiB;MAClB;IACF,CAjED;;IAkEAA,iBAAiB;EAClB,CAtEM,CAFX;AAyED","names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","config","count","Infinity","_a","delay","_b","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub_1","unsubscribe","notifier","notifierSubscriber_1","complete","error"],"sourceRoot":"","sources":["../../../../src/internal/operators/retry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}