{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nexport default {\n  __name: 'DashBoard',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const state = reactive({\n      tasks: [],\n      comments: [],\n      likes: []\n    });\n    const inputTask = ref('');\n    const inputComment = ref('');\n    const tasks = ref(null);\n    const commentsOfOneTask = ref(null);\n    const comments = reactive({\n      comments: []\n    });\n    const likes = reactive({\n      likes: []\n    });\n    const likeStatus = ref('text-gray-400');\n    const createTaskBtnRef = ref(null); // const addCmtBtnRef = ref(null);\n    // const addCmtInputRef = ref(null);\n    // Tasks\n\n    const createTask = async () => {\n      createTaskBtnRef.value.disabled = true;\n      createTaskBtnRef.value.innerText = 'Loading...';\n      const data = {\n        content: inputTask.value\n      };\n      console.log(data);\n      const response = await axios.post('http://localhost:3000/tasks', data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        },\n        withCredentials: true\n      });\n      inputTask.value = '';\n      getTasks();\n      createTaskBtnRef.value.disabled = false;\n      createTaskBtnRef.value.innerText = 'Create Task';\n    };\n\n    const getTasks = async () => {\n      const response = await axios.get('http://localhost:3000/tasks', {\n        withCredentials: true\n      });\n      tasks.value = response.data;\n    }; // Comments\n\n\n    const addComment = async taskId => {\n      const inputCommentElement = document.getElementById(`inputComment${taskId}`);\n      const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\n      console.log(inputCommentElement.value);\n      buttonCommentElement.disabled = true;\n      buttonCommentElement.innerText = 'Loading...';\n      const data = {\n        content: inputCommentElement.value\n      };\n      console.log(data);\n      const response = await axios.post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        },\n        withCredentials: true\n      });\n      inputCommentElement.value = '';\n      buttonCommentElement.disabled = false;\n      buttonCommentElement.innerText = 'Add comment';\n      state.comments[taskId].push(response.data);\n    };\n\n    const getCmtsFromOneTask = async taskId => {\n      const response = await axios.get(`http://localhost:3000/tasks/${taskId}/comments`, {\n        withCredentials: true\n      });\n      commentsOfOneTask.value = response.data;\n    }; // Likes\n\n\n    const likeClick = async taskId => {\n      if (state.likes[taskId].data.status === false || state.likes[taskId].data === '') {\n        const data = {\n          status: true\n        };\n        await axios.post(`http://localhost:3000/tasks/${taskId}/likes`, data, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n          },\n          withCredentials: true\n        });\n        state.likes[taskId].data.status === true;\n      } else if (state.likes[taskId].data.status === true) {\n        const data = {\n          status: false\n        };\n        await axios.post(`http://localhost:3000/tasks/${taskId}/likes`, data, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n          },\n          withCredentials: true\n        });\n        state.likes[taskId].data.status === false;\n      }\n    };\n\n    onMounted(async () => {\n      const response = await axios.get('http://localhost:3000/tasks', {\n        withCredentials: true\n      });\n      tasks.value = response.data;\n      state.tasks = response.data;\n      let count = 0;\n      state.tasks.forEach(async ele => {\n        const commentsLink = `http://localhost:3000/tasks/${ele.id}/comments`;\n        const likesLink = `http://localhost:3000/tasks/${ele.id}/likes`;\n        const requestComments = axios.get(commentsLink, {\n          withCredentials: true\n        });\n        const requestLikes = axios.get(likesLink, {\n          withCredentials: true\n        });\n        await axios.all([requestComments, requestLikes]).then(axios.spread((...responses) => {\n          state.comments[ele.id] = responses[0];\n          state.likes[ele.id] = responses[1];\n        }));\n        console.log(state.tasks);\n        state.tasks.forEach(ele => {\n          console.log(ele);\n        });\n        console.log(state.comments);\n        console.log(state.likes); // const response = await axios.get(\n        //     `http://localhost:3000/tasks/${ele.id}/comments`, \n        //     {withCredentials: true}\n        // );\n        // state.comments[ele.id] = response.data;\n        // console.log(state.comments[ele.id]);\n      });\n    });\n    const __returned__ = {\n      state,\n      inputTask,\n      inputComment,\n      tasks,\n      commentsOfOneTask,\n      comments,\n      likes,\n      likeStatus,\n      createTaskBtnRef,\n      createTask,\n      getTasks,\n      addComment,\n      getCmtsFromOneTask,\n      likeClick,\n      reactive,\n      ref,\n      onMounted,\n      axios\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["reactive","ref","onMounted","axios","state","tasks","comments","likes","inputTask","inputComment","commentsOfOneTask","likeStatus","createTaskBtnRef","createTask","value","disabled","innerText","data","content","console","log","response","post","headers","Accept","withCredentials","getTasks","get","addComment","taskId","inputCommentElement","document","getElementById","buttonCommentElement","push","getCmtsFromOneTask","likeClick","status","count","forEach","ele","commentsLink","id","likesLink","requestComments","requestLikes","all","then","spread","responses"],"sources":["E:/LapTrinh/NestJS/social-media-clone/frontend/src/components/DashBoard.vue"],"sourcesContent":["<template>\r\n    <h3>\r\n        Loggin as \r\n    </h3>\r\n\r\n    <div class=\"\">\r\n        <input type=\"text\" v-model=\"inputTask\" class=\"border border-gray-200\" placeholder=\"create task\"> \r\n        <button @click=\"createTask()\" ref=\"createTaskBtnRef\" class=\"border border-black bg-slate-200\">Create Task</button>\r\n    </div>\r\n\r\n    <section class=\" relative mx-auto w-3/4 flex justify-around border border-black my-3\">\r\n        <ul class=\" border border-red-400 space-y-4 w-2/4\">\r\n            <li v-for=\"task in state.tasks\" :key=\"task\" class=\" border border-gray-300 drop-shadow-md\">\r\n                <p class=\" font-semibold\">{{ task.content }}</p><hr>\r\n                <ul class=\" overflow-auto \">\r\n                    <li v-for=\"comment in state.comments[task.id].data\" :key=\"comment\">{{comment.content}}</li>\r\n                </ul>\r\n                <button :class=\"[state.likes[task.id].data.status ? 'text-blue-400 border border-blue-400' : 'text-gray-400' ]\" \r\n                        @click=\"likeClick(task.id)\" \r\n                        class=\" font-semibold px-2 block border border-gray-200 hover:bg-slate-200 hover:cursor-pointer\">\r\n                        Like\r\n                </button>\r\n                <div class=\" space-x-1\">\r\n                    <input type=\"text\" :id=\"'inputComment' + task.id\" class=\"border border-gray-200\" placeholder=\"add comment\">\r\n                    <button @click=\"addComment(task.id)\" :id=\"'buttonComment' + task.id\" \r\n                            class=\" px-2 border border-black bg-slate-200 hover:bg-slate-100\">Add comment</button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\" border border-gray-400 w-1/4\">\r\n            <p>Suggest Friend</p>\r\n            <ul></ul>\r\n        </div>\r\n    </section>\r\n\r\n    \r\n\r\n\r\n    \r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, onMounted  } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nconst state = reactive({tasks: [], comments: [], likes: []});\r\nconst inputTask = ref('');\r\nconst inputComment = ref('');\r\n\r\nconst tasks = ref(null);\r\nconst commentsOfOneTask = ref(null);\r\nconst comments = reactive({comments: []});\r\nconst likes = reactive({likes: []});\r\n\r\nconst likeStatus = ref('text-gray-400')\r\n\r\nconst createTaskBtnRef = ref(null);\r\n// const addCmtBtnRef = ref(null);\r\n// const addCmtInputRef = ref(null);\r\n\r\n// Tasks\r\nconst createTask = async() => {\r\n\r\n    createTaskBtnRef.value.disabled = true;\r\n    createTaskBtnRef.value.innerText = 'Loading...'\r\n    const data = {content: inputTask.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post('http://localhost:3000/tasks', data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n    inputTask.value = '';\r\n    getTasks();\r\n    createTaskBtnRef.value.disabled = false;\r\n    createTaskBtnRef.value.innerText = 'Create Task';\r\n}\r\n\r\nconst getTasks = async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n}\r\n\r\n\r\n// Comments\r\nconst addComment = async(taskId) => {\r\n\r\n    const inputCommentElement  = document.getElementById(`inputComment${taskId}`);\r\n    const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\r\n    console.log(inputCommentElement.value);\r\n    buttonCommentElement.disabled = true;\r\n    buttonCommentElement.innerText = 'Loading...';\r\n\r\n    const data = {content: inputCommentElement.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n\r\n    inputCommentElement.value = '';\r\n    buttonCommentElement.disabled = false;\r\n    buttonCommentElement.innerText = 'Add comment';\r\n    state.comments[taskId].push(response.data)\r\n}\r\n\r\nconst getCmtsFromOneTask = async(taskId) => {\r\n    const response = await axios.get(\r\n        `http://localhost:3000/tasks/${taskId}/comments`, \r\n        {withCredentials: true}\r\n    );\r\n    commentsOfOneTask.value = response.data;\r\n}\r\n\r\n\r\n// Likes\r\nconst likeClick = async(taskId) => {\r\n    if(state.likes[taskId].data.status === false || state.likes[taskId].data === '') {\r\n        const data = {status: true};\r\n        await axios.post(`http://localhost:3000/tasks/${taskId}/likes`, data, {\r\n            headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            },\r\n            withCredentials: true,\r\n        });\r\n        state.likes[taskId].data.status === true;\r\n    }\r\n    else if (state.likes[taskId].data.status === true) {\r\n        const data = {status: false};\r\n        await axios.post(`http://localhost:3000/tasks/${taskId}/likes`, data, {\r\n            headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            },\r\n            withCredentials: true,\r\n        });\r\n        state.likes[taskId].data.status === false;\r\n    }\r\n}\r\n\r\nonMounted( async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n    state.tasks = (response.data)\r\n\r\n    let count = 0;\r\n    state.tasks.forEach(async(ele) => {\r\n        const commentsLink = `http://localhost:3000/tasks/${ele.id}/comments`;\r\n        const likesLink = `http://localhost:3000/tasks/${ele.id}/likes`;\r\n\r\n        const requestComments = axios.get(commentsLink, {withCredentials: true});\r\n        const requestLikes = axios.get(likesLink, {withCredentials: true});\r\n\r\n        await axios.all([requestComments, requestLikes]).then(\r\n            axios.spread((...responses) => {\r\n            state.comments[ele.id] = responses[0];\r\n            state.likes[ele.id] = responses[1];\r\n            })\r\n        );\r\n\r\n        console.log(state.tasks);\r\n        state.tasks.forEach(ele => {console.log(ele)});\r\n        console.log(state.comments);\r\n        console.log(state.likes);\r\n\r\n\r\n\r\n        // const response = await axios.get(\r\n        //     `http://localhost:3000/tasks/${ele.id}/comments`, \r\n        //     {withCredentials: true}\r\n        // );\r\n        // state.comments[ele.id] = response.data;\r\n        // console.log(state.comments[ele.id]);\r\n    })\r\n\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.liked {\r\n    color: dodgerblue;\r\n}\r\n\r\n.unliked {\r\n    color: darkgray;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}