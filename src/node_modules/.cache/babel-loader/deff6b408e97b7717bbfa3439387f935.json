{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h3\", null, \" Loggin as \", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tasks, task => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task,\n      class: \"border border-red-400 my-3\"\n    }, [_createElementVNode(\"p\", null, _toDisplayString(task.content), 1\n    /* TEXT */\n    ), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.comments.comments[task.id], comment => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: comment\n      }, _toDisplayString(comment.content), 1\n      /* TEXT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]), _createElementVNode(\"input\", {\n      type: \"text\",\n      id: 'inputComment' + task.id,\n      class: \"border border-gray-200\",\n      placeholder: \"add comment\"\n    }, null, 8\n    /* PROPS */\n    , _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $setup.addComment(task.id),\n      ref_for: true,\n      ref: \"addCmtBtnRef\",\n      class: \"border border-black bg-slate-200\"\n    }, \"Add comment\", 8\n    /* PROPS */\n    , _hoisted_3)]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputTask = $event),\n    class: \"border border-gray-200\",\n    placeholder: \"create task\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.inputTask]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.createTask()),\n    ref: \"createTaskBtnRef\",\n    class: \"border border-black bg-slate-200\"\n  }, \"Create Task\", 512\n  /* NEED_PATCH */\n  )])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCACIA,oBAEK,IAFL,EAEK,IAFL,EAAI,aAAJ,EAEA;AAAA;AAFA;;;;;EAeKC,KAAK,EAAC;;;6DAfXC,YAGAF,oBASK,IATL,EASK,IATL,EASK,oBARDG,oBAOKC,SAPL,EAOK,IAPL,EAOKC,YAPcC,YAOd,EAPMC,IAAa,IAAT;yBAAfJ,oBAOK,IAPL,EAOK;MAPsBK,GAAG,EAAED,IAO3B;MAPiCN,KAAK,EAAC;IAOvC,CAPL,GACID,oBAAyB,GAAzB,EAAyB,IAAzB,EAAyBS,iBAAnBF,IAAI,CAACG,OAAc,CAAzB,EAAkB;IAAA;IAAlB,GACAV,oBAEK,IAFL,EAEK,IAFL,EAEK,oBADDG,oBAAyFC,SAAzF,EAAyF,IAAzF,EAAyFC,YAAnEC,gBAASK,QAAT,CAAkBJ,IAAI,CAACK,EAAvB,CAAmE,EAA9EC,OAAoC,IAA7B;2BAAlBV,oBAAyF,IAAzF,EAAyF;QAAtCK,GAAG,EAAEK;MAAiC,CAAzF,EAA+DJ,iBAAII,OAAO,CAACH,OAAZ,CAA/D,EAAkF;MAAA;MAAlF;KAAyF,CAAzF;;IAAA,CACC,EAFL,GAGAV,oBAA2G,OAA3G,EAA2G;MAApGc,IAAI,EAAC,MAA+F;MAAvFF,EAAE,mBAAmBL,IAAI,CAACK,EAA6D;MAAzDX,KAAK,EAAC,wBAAmD;MAA1Bc,WAAW,EAAC;IAAc,CAA3G;;IAAA,eACAf,oBAAqH,QAArH,EAAqH;MAA5GgB,OAAK,YAAEV,kBAAWC,IAAI,CAACK,EAAhB,CAAqG;mBAAA;MAAhFK,GAAG,EAAC,cAA4E;MAA7DhB,KAAK,EAAC;IAAuD,CAArH,EAAiG,aAAjG,EAA4G;IAAA;IAA5G,EAA4GiB,UAA5G,EANJ;GAOK,CAPL;;EAAA,CAQC,EATL,GAYAlB,oBAGM,KAHN,cAGM,iBAFFA,oBAAgG,OAAhG,EAAgG;IAAzFc,IAAI,EAAC,MAAoF;+DAApER,mBAASa,OAA2D;IAAzDlB,KAAK,EAAC,wBAAmD;IAA1Bc,WAAW,EAAC;EAAc,CAAhG;;EAAA,kBAA4BT,mBAE1B,EADFN,oBAAkH,QAAlH,EAAkH;IAAzGgB,OAAK,sCAAEV,mBAAF,CAAoG;IAApFW,GAAG,EAAC,kBAAgF;IAA7DhB,KAAK,EAAC;EAAuD,CAAlH,EAA8F,aAA9F,EAAyG;EAAA;EAAzG,CACE,CAHN","names":["_createElementVNode","class","_hoisted_1","_createElementBlock","_Fragment","_renderList","$setup","task","key","_toDisplayString","content","comments","id","comment","type","placeholder","onClick","ref","_hoisted_3","$event"],"sourceRoot":"","sources":["E:\\LapTrinh\\NestJS\\social-media-clone\\frontend\\src\\components\\DashBoard.vue"],"sourcesContent":["<template>\r\n    <h3>\r\n        Loggin as \r\n    </h3>\r\n    <ul>\r\n        <li v-for=\"task in tasks\" :key=\"task\" class=\"border border-red-400 my-3\">\r\n            <p>{{ task.content }}</p>\r\n            <ul>\r\n                <li v-for=\"comment in comments.comments[task.id]\" :key=\"comment\">{{comment.content}}</li>\r\n            </ul>\r\n            <input type=\"text\" :id=\"'inputComment' + task.id\" class=\"border border-gray-200\" placeholder=\"add comment\">\r\n            <button @click=\"addComment(task.id)\" ref=\"addCmtBtnRef\" class=\"border border-black bg-slate-200\">Add comment</button>\r\n        </li>\r\n    </ul>\r\n\r\n\r\n    <div class=\"\">\r\n        <input type=\"text\" v-model=\"inputTask\" class=\"border border-gray-200\" placeholder=\"create task\"> \r\n        <button @click=\"createTask()\" ref=\"createTaskBtnRef\" class=\"border border-black bg-slate-200\">Create Task</button>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, onMounted  } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nconst state = reactive({tasks: []});\r\nconst inputTask = ref('');\r\nconst inputComment = ref('');\r\n\r\nconst tasks = ref(null);\r\nconst commentsOfOneTask = ref(null);\r\nconst comments = reactive({comments: []});\r\n\r\nconst createTaskBtnRef = ref(null);\r\nconst addCmtBtnRef = ref(null);\r\nconst addCmtInputRef = ref(null);\r\n\r\n\r\nconst createTask = async() => {\r\n\r\n    createTaskBtnRef.value.disabled = true;\r\n    createTaskBtnRef.value.innerText = 'Loading...'\r\n    const data = {content: inputTask.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post('http://localhost:3000/tasks', data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n    inputTask.value = '';\r\n    getTasks();\r\n    createTaskBtnRef.value.disabled = false;\r\n    createTaskBtnRef.value.innerText = 'Create Task';\r\n}\r\n\r\nconst getTasks = async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n}\r\n\r\nconst addComment = async(taskId) => {\r\n\r\n    const inputCommentElement = document.getElementById(`inputComment${taskId}`);\r\n    console.log(inputCommentElement.value);\r\n    addCmtBtnRef.value.disabled = true;\r\n    addCmtBtnRef.value.innerText = 'Loading...'\r\n    const data = {content: inputCommentElement.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n    inputComment.value = '';\r\n    // getCmtsFromOneTask(taskId);\r\n    addCmtBtnRef.value.disabled = false;\r\n    addCmtBtnRef.value.innerText = 'add comment';\r\n    comments.comments[ele.id].push(response.data)\r\n}\r\n\r\nconst getCmtsFromOneTask = async(taskId) => {\r\n    const response = await axios.get(\r\n        `http://localhost:3000/tasks/${taskId}/comments`, \r\n        {withCredentials: true}\r\n    );\r\n    commentsOfOneTask.value = response.data;\r\n}\r\n\r\n\r\n\r\nonMounted( async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n    state.tasks = (response.data)\r\n\r\n    let count = 0;\r\n    state.tasks.forEach(async(ele) => {\r\n        const response = await axios.get(\r\n            `http://localhost:3000/tasks/${ele.id}/comments`, \r\n            {withCredentials: true}\r\n        );\r\n        comments.comments[ele.id] = response.data;\r\n        console.log(comments.comments[ele.id]);\r\n    })\r\n    // console.log(response.data);\r\n    // console.log(tasks.value);\r\n    // console.log('state.tasks', state.tasks);\r\n})\r\n\r\n</script>"]},"metadata":{},"sourceType":"module"}