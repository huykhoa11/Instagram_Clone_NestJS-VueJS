{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nexport default {\n  __name: 'DashBoard',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const state = reactive({\n      tasks: [],\n      comments: [],\n      likes: []\n    });\n    const tasks = ref([]);\n    const comments = ref([]);\n    const likes = ref([]);\n    const inputTask = ref('');\n    const isEdit = ref(false);\n    const commentsOfOneTask = ref(null);\n    const likeStatus = ref('text-gray-400');\n    const createTaskBtnRef = ref(null); // const addCmtBtnRef = ref(null);\n    // const addCmtInputRef = ref(null);\n    // Tasks\n\n    const createTask = async () => {\n      createTaskBtnRef.value.disabled = true;\n      createTaskBtnRef.value.innerText = 'Loading...';\n      const data = {\n        content: inputTask.value\n      };\n      const response = await axios.post('http://localhost:3000/tasks', data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        },\n        withCredentials: true\n      });\n      inputTask.value = '';\n      tasks.value.push(response.data);\n      comments.value[response.data.id] = [];\n      likes.value[response.data.id] = '';\n      console.log(comments.value);\n      console.log(likes.value); // getTasks();\n\n      createTaskBtnRef.value.disabled = false;\n      createTaskBtnRef.value.innerText = 'Create Task';\n    };\n\n    const getTasks = async () => {\n      const response = await axios.get('http://localhost:3000/tasks', {\n        withCredentials: true\n      });\n      tasks.value = response.data; // state.tasks = response.data;\n    };\n\n    const deleteTask = async taskId => {\n      await axios.delete(`http://localhost:3000/tasks/${taskId}`, {\n        withCredentials: true\n      });\n      tasks.value = tasks.value.filter(item => item.id !== taskId);\n      console.log(tasks.value);\n    };\n\n    const editTask = async taskId => {\n      isEdit.value = true;\n      console.log('change to input');\n    }; // Comments\n\n\n    const addComment = async taskId => {\n      const inputCommentElement = document.getElementById(`inputComment${taskId}`);\n      const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\n      console.log(inputCommentElement.value);\n      buttonCommentElement.disabled = true;\n      buttonCommentElement.classList.toggle('hover:bg-slate-100');\n      buttonCommentElement.innerText = 'Loading...';\n      const data = {\n        content: inputCommentElement.value\n      };\n      const response = await axios.post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        },\n        withCredentials: true\n      });\n      inputCommentElement.value = '';\n      buttonCommentElement.disabled = false;\n      buttonCommentElement.innerText = 'Add comment';\n      buttonCommentElement.classList.toggle('hover:bg-slate-100');\n      comments.value[taskId].push(response.data);\n    };\n\n    const deleteComment = async (commentId, taskId) => {\n      comments.value[taskId] = comments.value[taskId].filter(item => item.id !== commentId);\n      await axios.delete(`http://localhost:3000/tasks/comments/${commentId}`, {\n        withCredentials: true\n      }); // arr = arr.filter(item => item !== value)\n\n      console.log(comments.value[taskId]);\n    };\n\n    const getCmtsFromOneTask = async taskId => {\n      const response = await axios.get(`http://localhost:3000/tasks/${taskId}/comments`, {\n        withCredentials: true\n      });\n      commentsOfOneTask.value = response.data;\n    }; // Likes\n\n\n    const likeClick = async taskId => {\n      if (likes.value[taskId].status === false || likes.value[taskId] === '') {\n        if (likes.value[taskId] === '') {\n          likes.value[taskId] = {};\n        }\n\n        const data = {\n          status: true\n        };\n        await axios.post(`http://localhost:3000/tasks/${taskId}/likes`, data, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n          },\n          withCredentials: true\n        });\n        likes.value[taskId].status = true;\n      } else if (likes.value[taskId].status === true) {\n        // const data = {status: false};\n        likes.value[taskId].status = false;\n        await axios.delete(`http://localhost:3000/tasks/${taskId}/likes`, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n          },\n          withCredentials: true\n        });\n      }\n    };\n\n    onMounted(async () => {\n      const response = await axios.get('http://localhost:3000/tasks', {\n        withCredentials: true\n      });\n      console.log(response.data);\n      tasks.value = response.data;\n      let count = 0;\n      tasks.value.forEach(async ele => {\n        // const commentsLink = `http://localhost:3000/tasks/${ele.id}/comments`;\n        // const likesLink = `http://localhost:3000/tasks/${ele.id}/likes`;\n        // const requestComments = axios.get(commentsLink, {withCredentials: true});\n        // const requestLikes = axios.get(likesLink, {withCredentials: true});\n        // await axios.all([requestComments, requestLikes]).then(\n        //     axios.spread((...responses) => {\n        //     comments.value[ele.id] = responses[0];\n        //     likes.value[ele.id] = responses[1];\n        //     })\n        // );\n        let response;\n        response = await axios.get(`http://localhost:3000/tasks/${ele.id}/comments`, {\n          withCredentials: true\n        });\n        comments.value[ele.id] = response.data;\n        response = await axios.get(`http://localhost:3000/tasks/${ele.id}/likes`, {\n          withCredentials: true\n        });\n        likes.value[ele.id] = response.data;\n      });\n      console.log(tasks.value);\n      console.log(comments.value);\n      console.log(likes.value);\n    });\n    const __returned__ = {\n      state,\n      tasks,\n      comments,\n      likes,\n      inputTask,\n      isEdit,\n      commentsOfOneTask,\n      likeStatus,\n      createTaskBtnRef,\n      createTask,\n      getTasks,\n      deleteTask,\n      editTask,\n      addComment,\n      deleteComment,\n      getCmtsFromOneTask,\n      likeClick,\n      reactive,\n      ref,\n      onMounted,\n      axios\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["reactive","ref","onMounted","axios","state","tasks","comments","likes","inputTask","isEdit","commentsOfOneTask","likeStatus","createTaskBtnRef","createTask","value","disabled","innerText","data","content","response","post","headers","Accept","withCredentials","push","id","console","log","getTasks","get","deleteTask","taskId","delete","filter","item","editTask","addComment","inputCommentElement","document","getElementById","buttonCommentElement","classList","toggle","deleteComment","commentId","getCmtsFromOneTask","likeClick","status","count","forEach","ele"],"sources":["E:/LapTrinh/NestJS/social-media-clone/frontend/src/components/DashBoard.vue"],"sourcesContent":["<template>\r\n    <section class=\" bg-gray-50 h-full\">\r\n\r\n        <h3>\r\n            Loggin as \r\n        </h3>\r\n\r\n        <div class=\"\">\r\n            <input type=\"text\" v-model=\"inputTask\" class=\"border border-gray-200\" placeholder=\"create task\"> \r\n            <button @click=\"createTask()\" ref=\"createTaskBtnRef\" class=\"border border-black bg-slate-200\">Create Task</button>\r\n        </div>\r\n\r\n        <div class=\" relative mx-auto w-3/4 flex justify-around my-3 \">\r\n            <ul class=\" space-y-10 w-2/4\">\r\n                <li v-for=\"task in tasks\" :key=\"task\" class=\" border border-gray-400 rounded-md bg-white\">\r\n                    <div class=\" px-2 flex justify-between items-center\">\r\n                        <div class=\"flex\" v-if=\"isEdit === true\">\r\n                            <input type=\"text\" placeholder=\"edit task content\" class=\" flex-1\">\r\n                            <button @click=\"editTask(task.id)\" class=\" bg-green-500 text-white px-1\">Save</button>\r\n                            <button @click=\"isEdit = false\" class=\" bg-slate-200 text-gray-300\">Cancel</button>\r\n                        </div>\r\n                        <p class=\" font-semibold\" v-else>{{ task.content }}</p>\r\n                        <i class=\"fa-solid fa-ellipsis pl-3 mr-3 inline-block hover:cursor-pointer group relative\">\r\n                            <div class=\" absolute -right-6 top-4 w-20 border border-gray-200 bg-white hidden group-hover:inline-block\">\r\n                                <div class=\" text-xs text-blue-400 hover:bg-sky-200 hover:cursor-pointer pl-1 py-1\" @click=\"isEdit = true\">Edit</div>\r\n                                <div class=\" text-xs text-red-500 hover:bg-red-200 hover:cursor-pointer pl-1 py-1\" @click=\"deleteTask(task.id)\">Delete</div>\r\n                            </div>\r\n                        </i>\r\n                    </div>\r\n                    <hr>\r\n                    <ul class=\" px-1 py-2 overflow-auto \">\r\n                        <li v-for=\"comment in comments[task.id]\" :key=\"comment\" class=\"flex justify-between items-center group\">\r\n                            <p class=\"text-sm\">{{comment.content}}</p>\r\n                            <i @click=\"deleteComment(comment.id, task.id)\" class=\"fa-solid fa-x mr-4 text-xs hidden opacity-50 \r\n                                hover:cursor-pointer hover:opacity-80 hover:text-red-500 group-hover:inline-block\"></i>\r\n                        </li>\r\n                    </ul>\r\n                    <button :class=\"[likes[task.id] === '' ?  'text-gray-400' : 'text-blue-400 bg-sky-100'  ]\" \r\n                            @click=\"likeClick(task.id)\" \r\n                            class=\" px-2 text-sm block border border-gray-200 hover:bg-slate-200 hover:cursor-pointer\">\r\n                            <i class=\"fa-sharp fa-solid fa-thumbs-up mr-2\"></i>Like\r\n                    </button>\r\n                    <div class=\" flex\">\r\n                        <input type=\"text\" :id=\"'inputComment' + task.id\" class=\" flex-1 pl-1 border border-gray-200\" placeholder=\"add comment\">\r\n                        <button @click=\"addComment(task.id)\" :id=\"'buttonComment' + task.id\" \r\n                                class=\" px-2 border border-gray-200 bg-indigo-500 hover:bg-indigo-400 text-gray-100\">Comment</button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n\r\n            <div class=\" border border-gray-400 w-1/4 h-96\">\r\n                <p>Suggest Friend</p>\r\n                <ul></ul>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, onMounted  } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nconst state = reactive({tasks: [], comments: [], likes: []});\r\nconst tasks = ref([]);\r\nconst comments = ref([]);\r\nconst likes = ref([]);\r\nconst inputTask = ref('');\r\nconst isEdit = ref(false);\r\n\r\nconst commentsOfOneTask = ref(null);\r\nconst likeStatus = ref('text-gray-400')\r\n\r\nconst createTaskBtnRef = ref(null);\r\n// const addCmtBtnRef = ref(null);\r\n// const addCmtInputRef = ref(null);\r\n\r\n// Tasks\r\nconst createTask = async() => {\r\n\r\n    createTaskBtnRef.value.disabled = true;\r\n    createTaskBtnRef.value.innerText = 'Loading...'\r\n    const data = {content: inputTask.value};\r\n    \r\n    const response = await axios\r\n    .post('http://localhost:3000/tasks', data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n    inputTask.value = '';\r\n    tasks.value.push(response.data);\r\n    comments.value[response.data.id] = [];\r\n    likes.value[response.data.id] = '';\r\n    console.log(comments.value);\r\n    console.log(likes.value);\r\n    // getTasks();\r\n    createTaskBtnRef.value.disabled = false;\r\n    createTaskBtnRef.value.innerText = 'Create Task';\r\n}\r\n\r\nconst getTasks = async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n    // state.tasks = response.data;\r\n}\r\n\r\nconst deleteTask = async (taskId) => {\r\n    await axios.delete(`http://localhost:3000/tasks/${taskId}`, {withCredentials: true});\r\n    tasks.value = tasks.value.filter(item => item.id !== taskId);\r\n    console.log(tasks.value);\r\n}\r\n\r\nconst editTask = async(taskId) => {\r\n    isEdit.value = true;\r\n    console.log('change to input');\r\n}\r\n\r\n\r\n// Comments\r\nconst addComment = async(taskId) => {\r\n\r\n    const inputCommentElement  = document.getElementById(`inputComment${taskId}`);\r\n    const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\r\n    console.log(inputCommentElement.value);\r\n    buttonCommentElement.disabled = true;\r\n    buttonCommentElement.classList.toggle('hover:bg-slate-100');\r\n    buttonCommentElement.innerText = 'Loading...';\r\n\r\n    const data = {content: inputCommentElement.value};\r\n    \r\n    const response = await axios\r\n    .post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n\r\n    inputCommentElement.value = '';\r\n    buttonCommentElement.disabled = false;\r\n    buttonCommentElement.innerText = 'Add comment';\r\n    buttonCommentElement.classList.toggle('hover:bg-slate-100');\r\n    comments.value[taskId].push(response.data)\r\n}\r\n\r\nconst deleteComment = async(commentId, taskId) => {\r\n    comments.value[taskId] = comments.value[taskId].filter(item => item.id !== commentId);\r\n    await axios.delete(`http://localhost:3000/tasks/comments/${commentId}`, {withCredentials: true});\r\n    // arr = arr.filter(item => item !== value)\r\n    console.log(comments.value[taskId]);\r\n\r\n}\r\n\r\nconst getCmtsFromOneTask = async(taskId) => {\r\n    const response = await axios.get(\r\n        `http://localhost:3000/tasks/${taskId}/comments`, \r\n        {withCredentials: true}\r\n    );\r\n    commentsOfOneTask.value = response.data;\r\n}\r\n\r\n\r\n// Likes\r\nconst likeClick = async(taskId) => {\r\n\r\n    if(likes.value[taskId].status === false || likes.value[taskId]  === '') {\r\n        if(likes.value[taskId]  === '') {\r\n           likes.value[taskId] = {};\r\n        }\r\n\r\n        const data = {status: true};\r\n        await axios.post(`http://localhost:3000/tasks/${taskId}/likes`, data, {\r\n            headers: {\r\n                Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            },\r\n            withCredentials: true,\r\n        });\r\n        likes.value[taskId].status  = true;\r\n    }\r\n    else if (likes.value[taskId].status  === true) {\r\n        // const data = {status: false};\r\n        likes.value[taskId].status  = false;\r\n        await axios.delete(`http://localhost:3000/tasks/${taskId}/likes`, {\r\n            headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            },\r\n            withCredentials: true,\r\n        });\r\n    }\r\n}\r\n\r\nonMounted( async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    console.log(response.data);\r\n    tasks.value = response.data;\r\n\r\n    let count = 0;\r\n    tasks.value.forEach(async(ele) => {\r\n        // const commentsLink = `http://localhost:3000/tasks/${ele.id}/comments`;\r\n        // const likesLink = `http://localhost:3000/tasks/${ele.id}/likes`;\r\n\r\n        // const requestComments = axios.get(commentsLink, {withCredentials: true});\r\n        // const requestLikes = axios.get(likesLink, {withCredentials: true});\r\n\r\n        // await axios.all([requestComments, requestLikes]).then(\r\n        //     axios.spread((...responses) => {\r\n        //     comments.value[ele.id] = responses[0];\r\n        //     likes.value[ele.id] = responses[1];\r\n        //     })\r\n        // );\r\n\r\n        let response;\r\n        response = await axios.get(\r\n            `http://localhost:3000/tasks/${ele.id}/comments`, \r\n            {withCredentials: true}\r\n        );\r\n        comments.value[ele.id] = response.data;\r\n\r\n        response = await axios.get(\r\n            `http://localhost:3000/tasks/${ele.id}/likes`, \r\n            {withCredentials: true}\r\n        );\r\n        likes.value[ele.id] = response.data;\r\n\r\n\r\n    })\r\n\r\n    console.log(tasks.value);\r\n    console.log(comments.value);\r\n    console.log(likes.value);\r\n    \r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.liked {\r\n    color: dodgerblue;\r\n}\r\n\r\n.unliked {\r\n    color: darkgray;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}