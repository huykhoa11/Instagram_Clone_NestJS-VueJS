{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nexport default {\n  __name: 'DashBoard',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const state = reactive({\n      tasks: []\n    });\n    const inputTask = ref('');\n    const inputComment = ref('');\n    const tasks = ref(null);\n    const commentsOfOneTask = ref(null);\n    const comments = reactive({\n      comments: []\n    });\n    const likeStatus = ref('text-gray-400');\n    const createTaskBtnRef = ref(null); // const addCmtBtnRef = ref(null);\n    // const addCmtInputRef = ref(null);\n\n    const createTask = async () => {\n      createTaskBtnRef.value.disabled = true;\n      createTaskBtnRef.value.innerText = 'Loading...';\n      const data = {\n        content: inputTask.value\n      };\n      console.log(data);\n      const response = await axios.post('http://localhost:3000/tasks', data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        },\n        withCredentials: true\n      });\n      inputTask.value = '';\n      getTasks();\n      createTaskBtnRef.value.disabled = false;\n      createTaskBtnRef.value.innerText = 'Create Task';\n    };\n\n    const getTasks = async () => {\n      const response = await axios.get('http://localhost:3000/tasks', {\n        withCredentials: true\n      });\n      tasks.value = response.data;\n    };\n\n    const addComment = async taskId => {\n      const inputCommentElement = document.getElementById(`inputComment${taskId}`);\n      const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\n      console.log(inputCommentElement.value);\n      buttonCommentElement.disabled = true;\n      buttonCommentElement.innerText = 'Loading...';\n      const data = {\n        content: inputCommentElement.value\n      };\n      console.log(data);\n      const response = await axios.post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        },\n        withCredentials: true\n      });\n      inputCommentElement.value = '';\n      buttonCommentElement.disabled = false;\n      buttonCommentElement.innerText = 'Add comment';\n      comments.comments[taskId].push(response.data);\n    };\n\n    const getCmtsFromOneTask = async taskId => {\n      const response = await axios.get(`http://localhost:3000/tasks/${taskId}/comments`, {\n        withCredentials: true\n      });\n      commentsOfOneTask.value = response.data;\n    };\n\n    onMounted(async () => {\n      const response = await axios.get('http://localhost:3000/tasks', {\n        withCredentials: true\n      });\n      tasks.value = response.data;\n      state.tasks = response.data;\n      let count = 0;\n      state.tasks.forEach(async ele => {\n        const response = await axios.get(`http://localhost:3000/tasks/${ele.id}/comments`, {\n          withCredentials: true\n        });\n        comments.comments[ele.id] = response.data;\n        console.log(comments.comments[ele.id]);\n      }); // console.log(response.data);\n      // console.log(tasks.value);\n      // console.log('state.tasks', state.tasks);\n    });\n    const __returned__ = {\n      state,\n      inputTask,\n      inputComment,\n      tasks,\n      commentsOfOneTask,\n      comments,\n      likeStatus,\n      createTaskBtnRef,\n      createTask,\n      getTasks,\n      addComment,\n      getCmtsFromOneTask,\n      reactive,\n      ref,\n      onMounted,\n      axios\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["reactive","ref","onMounted","axios","state","tasks","inputTask","inputComment","commentsOfOneTask","comments","likeStatus","createTaskBtnRef","createTask","value","disabled","innerText","data","content","console","log","response","post","headers","Accept","withCredentials","getTasks","get","addComment","taskId","inputCommentElement","document","getElementById","buttonCommentElement","push","getCmtsFromOneTask","count","forEach","ele","id"],"sources":["E:/LapTrinh/NestJS/social-media-clone/frontend/src/components/DashBoard.vue"],"sourcesContent":["<template>\r\n    <h3>\r\n        Loggin as \r\n    </h3>\r\n\r\n    <div class=\"\">\r\n        <input type=\"text\" v-model=\"inputTask\" class=\"border border-gray-200\" placeholder=\"create task\"> \r\n        <button @click=\"createTask()\" ref=\"createTaskBtnRef\" class=\"border border-black bg-slate-200\">Create Task</button>\r\n    </div>\r\n\r\n    <section class=\" relative mx-auto w-3/4 flex justify-around border border-black my-3\">\r\n        <ul class=\" border border-red-400 space-y-4 w-2/4\">\r\n            <li v-for=\"task in tasks\" :key=\"task\" class=\" border border-gray-300 drop-shadow-md\">\r\n                <p class=\" font-semibold\">{{ task.content }}</p><hr>\r\n                <ul class=\" overflow-auto \">\r\n                    <li v-for=\"comment in comments.comments[task.id]\" :key=\"comment\">{{comment.content}}</li>\r\n                </ul>\r\n                <div :class=\"likeStatus\" class=\" font-semibold px-2 inline-block hover:bg-slate-200\">Like</div>\r\n                <div class=\"\">\r\n                    <input type=\"text\" :id=\"'inputComment' + task.id\" class=\"border border-gray-200\" placeholder=\"add comment\">\r\n                    <button @click=\"addComment(task.id)\" :id=\"'buttonComment' + task.id\" \r\n                            class=\"border border-black bg-slate-200 hover:bg-slate-100\">Add comment</button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\" border border-gray-400 w-1/4\">\r\n            <p>Suggest Friend</p>\r\n            <ul></ul>\r\n        </div>\r\n    </section>\r\n\r\n    \r\n\r\n\r\n    \r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, onMounted  } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nconst state = reactive({tasks: []});\r\nconst inputTask = ref('');\r\nconst inputComment = ref('');\r\n\r\nconst tasks = ref(null);\r\nconst commentsOfOneTask = ref(null);\r\nconst comments = reactive({comments: []});\r\n\r\nconst likeStatus = ref('text-gray-400')\r\n\r\nconst createTaskBtnRef = ref(null);\r\n// const addCmtBtnRef = ref(null);\r\n// const addCmtInputRef = ref(null);\r\n\r\n\r\nconst createTask = async() => {\r\n\r\n    createTaskBtnRef.value.disabled = true;\r\n    createTaskBtnRef.value.innerText = 'Loading...'\r\n    const data = {content: inputTask.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post('http://localhost:3000/tasks', data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n    inputTask.value = '';\r\n    getTasks();\r\n    createTaskBtnRef.value.disabled = false;\r\n    createTaskBtnRef.value.innerText = 'Create Task';\r\n}\r\n\r\nconst getTasks = async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n}\r\n\r\nconst addComment = async(taskId) => {\r\n\r\n    const inputCommentElement  = document.getElementById(`inputComment${taskId}`);\r\n    const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\r\n    console.log(inputCommentElement.value);\r\n    buttonCommentElement.disabled = true;\r\n    buttonCommentElement.innerText = 'Loading...';\r\n\r\n    const data = {content: inputCommentElement.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n\r\n    inputCommentElement.value = '';\r\n    buttonCommentElement.disabled = false;\r\n    buttonCommentElement.innerText = 'Add comment';\r\n    comments.comments[taskId].push(response.data)\r\n}\r\n\r\nconst getCmtsFromOneTask = async(taskId) => {\r\n    const response = await axios.get(\r\n        `http://localhost:3000/tasks/${taskId}/comments`, \r\n        {withCredentials: true}\r\n    );\r\n    commentsOfOneTask.value = response.data;\r\n}\r\n\r\n\r\n\r\nonMounted( async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n    state.tasks = (response.data)\r\n\r\n    let count = 0;\r\n    state.tasks.forEach(async(ele) => {\r\n        const response = await axios.get(\r\n            `http://localhost:3000/tasks/${ele.id}/comments`, \r\n            {withCredentials: true}\r\n        );\r\n        comments.comments[ele.id] = response.data;\r\n        console.log(comments.comments[ele.id]);\r\n    })\r\n    // console.log(response.data);\r\n    // console.log(tasks.value);\r\n    // console.log('state.tasks', state.tasks);\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.liked {\r\n    color: dodgerblue;\r\n}\r\n\r\n.unliked {\r\n    color: darkgray;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}