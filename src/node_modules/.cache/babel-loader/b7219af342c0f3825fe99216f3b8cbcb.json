{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n\n    var connection = this._connection;\n\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nexport { ConnectableObservable };","map":{"version":3,"mappings":";AACA,SAASA,UAAT,QAA2B,eAA3B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAQ,IAAIC,mBAArB,QAAgD,uBAAhD;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,OAAT,QAAwB,cAAxB;;AASA;EAA8CC;;EAgB5C,+BAAmBC,MAAnB,EAAoDC,cAApD,EAAoF;IAApF,YACEC,qBAAO,IADT;;IAAmBC;IAAiCA;IAf1CA,iBAA8B,IAA9B;IACAA,kBAAoB,CAApB;IACAA,oBAAmC,IAAnC;;IAkBR,IAAIL,OAAO,CAACE,MAAD,CAAX,EAAqB;MACnBG,KAAI,CAACC,IAAL,GAAYJ,MAAM,CAACI,IAAnB;IACD;;;EACF;;EAGSC,6CAAV,UAAqBC,UAArB,EAA8C;IAC5C,OAAO,KAAKC,UAAL,GAAkBC,SAAlB,CAA4BF,UAA5B,CAAP;EACD,CAFS;;EAIAD,6CAAV;IACE,IAAMI,OAAO,GAAG,KAAKC,QAArB;;IACA,IAAI,CAACD,OAAD,IAAYA,OAAO,CAACE,SAAxB,EAAmC;MACjC,KAAKD,QAAL,GAAgB,KAAKT,cAAL,EAAhB;IACD;;IACD,OAAO,KAAKS,QAAZ;EACD,CANS;;EAQAL,4CAAV;IACE,KAAKO,SAAL,GAAiB,CAAjB;IACQ,eAAW,GAAK,KAAIC,WAApB;IACR,KAAKH,QAAL,GAAgB,KAAKG,WAAL,GAAmB,IAAnC;IACAA,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEC,WAAb;EACD,CALS;;EAWVT;IAAA;;IACE,IAAIU,UAAU,GAAG,KAAKF,WAAtB;;IACA,IAAI,CAACE,UAAL,EAAiB;MACfA,UAAU,GAAG,KAAKF,WAAL,GAAmB,IAAInB,YAAJ,EAAhC;MACA,IAAMsB,SAAO,GAAG,KAAKT,UAAL,EAAhB;MACAQ,UAAU,CAACE,GAAX,CACE,KAAKjB,MAAL,CAAYQ,SAAZ,CACEX,wBAAwB,CACtBmB,SADsB,EAEtBE,SAFsB,EAGtB;QACEf,KAAI,CAACgB,SAAL;;QACAH,SAAO,CAACI,QAAR;MACD,CANqB,EAOtB,UAACC,GAAD,EAAI;QACFlB,KAAI,CAACgB,SAAL;;QACAH,SAAO,CAACM,KAAR,CAAcD,GAAd;MACD,CAVqB,EAWtB;QAAM,YAAI,CAACF,SAAL;MAAgB,CAXA,CAD1B,CADF;;MAkBA,IAAIJ,UAAU,CAACQ,MAAf,EAAuB;QACrB,KAAKV,WAAL,GAAmB,IAAnB;QACAE,UAAU,GAAGrB,YAAY,CAAC8B,KAA1B;MACD;IACF;;IACD,OAAOT,UAAP;EACD,CA7BD;;EAmCAV;IACE,OAAOT,mBAAmB,GAAG,IAAH,CAA1B;EACD,CAFD;;EAGF;AAAC,CAxFD,CAA8CH,UAA9C","names":["Observable","Subscription","refCount","higherOrderRefCount","createOperatorSubscriber","hasLift","__extends","source","subjectFactory","_super","_this","lift","ConnectableObservable","subscriber","getSubject","subscribe","subject","_subject","isStopped","_refCount","_connection","unsubscribe","connection","subject_1","add","undefined","_teardown","complete","err","error","closed","EMPTY"],"sourceRoot":"","sources":["../../../../src/internal/observable/ConnectableObservable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}