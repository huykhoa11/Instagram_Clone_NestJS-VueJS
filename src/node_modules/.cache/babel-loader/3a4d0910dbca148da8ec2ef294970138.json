{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-22009874\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \" Loggin as \", -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = {\n  class: \"\"\n};\nconst _hoisted_3 = {\n  class: \"relative mx-auto w-3/4 flex justify-around border border-black my-3\"\n};\nconst _hoisted_4 = {\n  class: \"border border-red-400 space-y-4 w-2/4\"\n};\nconst _hoisted_5 = {\n  class: \"font-semibold\"\n};\n\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_7 = {\n  class: \"overflow-auto\"\n};\nconst _hoisted_8 = {\n  class: \"space-x-1\"\n};\nconst _hoisted_9 = [\"id\"];\nconst _hoisted_10 = [\"onClick\", \"id\"];\n\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"border border-gray-400 w-1/4\"\n}, [/*#__PURE__*/_createElementVNode(\"p\", null, \"Suggest Friend\"), /*#__PURE__*/_createElementVNode(\"ul\")], -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputTask = $event),\n    class: \"border border-gray-200\",\n    placeholder: \"create task\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.inputTask]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.createTask()),\n    ref: \"createTaskBtnRef\",\n    class: \"border border-black bg-slate-200\"\n  }, \"Create Task\", 512\n  /* NEED_PATCH */\n  )]), _createElementVNode(\"section\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.state.tasks.data, task => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task,\n      class: \"border border-gray-300 drop-shadow-md\"\n    }, [_createElementVNode(\"p\", _hoisted_5, _toDisplayString(task.content), 1\n    /* TEXT */\n    ), _hoisted_6, _createElementVNode(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.state.comments[task.id].data, comment => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: comment\n      }, _toDisplayString(comment.content), 1\n      /* TEXT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]), _createCommentVNode(\" <button :class=\\\"[state.likes[task.id].status ? 'text-blue-400' : 'text-gray-400' ]\\\" \\r\\n                        @click=\\\"likeClick(task.id)\\\" \\r\\n                        class=\\\" font-semibold px-2 block border border-black hover:bg-slate-200 hover:cursor-pointer\\\">\\r\\n                        Like\\r\\n                </button> \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"input\", {\n      type: \"text\",\n      id: 'inputComment' + task.id,\n      class: \"border border-gray-200\",\n      placeholder: \"add comment\"\n    }, null, 8\n    /* PROPS */\n    , _hoisted_9), _createElementVNode(\"button\", {\n      onClick: $event => $setup.addComment(task.id),\n      id: 'buttonComment' + task.id,\n      class: \"px-2 border border-black bg-slate-200 hover:bg-slate-100\"\n    }, \"Add comment\", 8\n    /* PROPS */\n    , _hoisted_10)])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _hoisted_11])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;gEACIA,oBAEK,IAFL,EAEK,IAFL,EAAI,aAAJ,EAEA;AAAA;AAFA;;;EAIKC,KAAK,EAAC;;;EAKFA,KAAK,EAAC;;;EACPA,KAAK,EAAC;;;EAECA,KAAK,EAAC;;;gEAAuCD,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EAC5CC,KAAK,EAAC;;;EAQLA,KAAK,EAAC;;;;;iEAQnBD,oBAGM,KAHN,EAGM;EAHDC,KAAK,EAAC;AAGL,CAHN,EAA0C,cACtCD,oBAAqB,GAArB,EAAqB,IAArB,EAAG,gBAAH,CADsC,eAEtCA,oBAAS,IAAT,CAFsC,CAA1C;;AAAA;;;6DA7BJE,YAIAF,oBAGM,KAHN,cAGM,iBAFFA,oBAAgG,OAAhG,EAAgG;IAAzFG,IAAI,EAAC,MAAoF;+DAApEC,mBAASC,OAA2D;IAAzDJ,KAAK,EAAC,wBAAmD;IAA1BK,WAAW,EAAC;EAAc,CAAhG;;EAAA,kBAA4BF,mBAE1B,EADFJ,oBAAkH,QAAlH,EAAkH;IAAzGO,OAAK,sCAAEH,mBAAF,CAAoG;IAApFI,GAAG,EAAC,kBAAgF;IAA7DP,KAAK,EAAC;EAAuD,CAAlH,EAA8F,aAA9F,EAAyG;EAAA;EAAzG,CACE,CAHN,GAKAD,oBAwBU,SAxBV,cAwBU,CAvBNA,oBAiBK,IAjBL,cAiBK,oBAhBDS,oBAeKC,SAfL,EAeK,IAfL,EAeKC,YAfcP,aAAMQ,KAAN,CAAYC,IAe1B,EAfMC,IAAwB,IAApB;yBAAfL,oBAeK,IAfL,EAeK;MAfiCM,GAAG,EAAED,IAetC;MAf4Cb,KAAK,EAAC;IAelD,CAfL,GACID,oBAAgD,GAAhD,cAAgDgB,iBAAnBF,IAAI,CAACG,OAAc,CAAhD,EAAyC;IAAA;IAAzC,GAAgDC,YAChDlB,oBAEK,IAFL,cAEK,oBADDS,oBAA2FC,SAA3F,EAA2F,IAA3F,EAA2FC,YAArEP,aAAMe,QAAN,CAAeL,IAAI,CAACM,EAApB,EAAwBP,IAA6C,EAAhFQ,OAAuC,IAAhC;2BAAlBZ,oBAA2F,IAA3F,EAA2F;QAAtCM,GAAG,EAAEM;MAAiC,CAA3F,EAAiEL,iBAAIK,OAAO,CAACJ,OAAZ,CAAjE,EAAoF;MAAA;MAApF;KAA2F,CAA3F;;IAAA,CACC,EAFL,GAGAK,oWAKAtB,oBAIM,KAJN,cAIM,CAHFA,oBAA2G,OAA3G,EAA2G;MAApGG,IAAI,EAAC,MAA+F;MAAvFiB,EAAE,mBAAmBN,IAAI,CAACM,EAA6D;MAAzDnB,KAAK,EAAC,wBAAmD;MAA1BK,WAAW,EAAC;IAAc,CAA3G;;IAAA,aAGE,EAFFN,oBAC8F,QAD9F,EAC8F;MADrFO,OAAK,YAAEH,kBAAWU,IAAI,CAACM,EAAhB,CAC8E;MADxDA,EAAE,oBAAoBN,IAAI,CAACM,EAC6B;MAAtFnB,KAAK,EAAC;IAAgF,CAD9F,EAC0E,aAD1E,EACqF;IAAA;IADrF,EACqFsB,WADrF,CAEE,CAJN,EAVJ;GAeK,CAfL;;EAAA,CAgBC,EAjBL,CAuBM,EAJNC,WAIM,CAxBV","names":["_createElementVNode","class","_hoisted_1","type","$setup","$event","placeholder","onClick","ref","_createElementBlock","_Fragment","_renderList","tasks","data","task","key","_toDisplayString","content","_hoisted_6","comments","id","comment","_createCommentVNode","_hoisted_10","_hoisted_11"],"sourceRoot":"","sources":["E:\\LapTrinh\\NestJS\\social-media-clone\\frontend\\src\\components\\DashBoard.vue"],"sourcesContent":["<template>\r\n    <h3>\r\n        Loggin as \r\n    </h3>\r\n\r\n    <div class=\"\">\r\n        <input type=\"text\" v-model=\"inputTask\" class=\"border border-gray-200\" placeholder=\"create task\"> \r\n        <button @click=\"createTask()\" ref=\"createTaskBtnRef\" class=\"border border-black bg-slate-200\">Create Task</button>\r\n    </div>\r\n\r\n    <section class=\" relative mx-auto w-3/4 flex justify-around border border-black my-3\">\r\n        <ul class=\" border border-red-400 space-y-4 w-2/4\">\r\n            <li v-for=\"task in state.tasks.data\" :key=\"task\" class=\" border border-gray-300 drop-shadow-md\">\r\n                <p class=\" font-semibold\">{{ task.content }}</p><hr>\r\n                <ul class=\" overflow-auto \">\r\n                    <li v-for=\"comment in state.comments[task.id].data\" :key=\"comment\">{{comment.content}}</li>\r\n                </ul>\r\n                <!-- <button :class=\"[state.likes[task.id].status ? 'text-blue-400' : 'text-gray-400' ]\" \r\n                        @click=\"likeClick(task.id)\" \r\n                        class=\" font-semibold px-2 block border border-black hover:bg-slate-200 hover:cursor-pointer\">\r\n                        Like\r\n                </button> -->\r\n                <div class=\" space-x-1\">\r\n                    <input type=\"text\" :id=\"'inputComment' + task.id\" class=\"border border-gray-200\" placeholder=\"add comment\">\r\n                    <button @click=\"addComment(task.id)\" :id=\"'buttonComment' + task.id\" \r\n                            class=\" px-2 border border-black bg-slate-200 hover:bg-slate-100\">Add comment</button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\" border border-gray-400 w-1/4\">\r\n            <p>Suggest Friend</p>\r\n            <ul></ul>\r\n        </div>\r\n    </section>\r\n\r\n    \r\n\r\n\r\n    \r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, onMounted  } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nconst state = reactive({tasks: [], comments: [], likes: []});\r\nconst inputTask = ref('');\r\nconst inputComment = ref('');\r\n\r\nconst tasks = ref(null);\r\nconst commentsOfOneTask = ref(null);\r\nconst comments = reactive({comments: []});\r\nconst likes = reactive({likes: []});\r\n\r\nconst likeStatus = ref('text-gray-400')\r\n\r\nconst createTaskBtnRef = ref(null);\r\n// const addCmtBtnRef = ref(null);\r\n// const addCmtInputRef = ref(null);\r\n\r\n// Tasks\r\nconst createTask = async() => {\r\n\r\n    createTaskBtnRef.value.disabled = true;\r\n    createTaskBtnRef.value.innerText = 'Loading...'\r\n    const data = {content: inputTask.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post('http://localhost:3000/tasks', data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n    inputTask.value = '';\r\n    getTasks();\r\n    createTaskBtnRef.value.disabled = false;\r\n    createTaskBtnRef.value.innerText = 'Create Task';\r\n}\r\n\r\nconst getTasks = async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n}\r\n\r\n\r\n// Comments\r\nconst addComment = async(taskId) => {\r\n\r\n    const inputCommentElement  = document.getElementById(`inputComment${taskId}`);\r\n    const buttonCommentElement = document.getElementById(`buttonComment${taskId}`);\r\n    console.log(inputCommentElement.value);\r\n    buttonCommentElement.disabled = true;\r\n    buttonCommentElement.innerText = 'Loading...';\r\n\r\n    const data = {content: inputCommentElement.value};\r\n    console.log(data);\r\n    \r\n    const response = await axios\r\n    .post(`http://localhost:3000/tasks/${taskId}/comments`, data, {\r\n        headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n        withCredentials: true,\r\n    })\r\n\r\n    inputCommentElement.value = '';\r\n    buttonCommentElement.disabled = false;\r\n    buttonCommentElement.innerText = 'Add comment';\r\n    state.comments[taskId].push(response.data)\r\n}\r\n\r\nconst getCmtsFromOneTask = async(taskId) => {\r\n    const response = await axios.get(\r\n        `http://localhost:3000/tasks/${taskId}/comments`, \r\n        {withCredentials: true}\r\n    );\r\n    commentsOfOneTask.value = response.data;\r\n}\r\n\r\n\r\n// Likes\r\nconst likeClick = async(taskId) => {\r\n    if(state.likes[taskId].status === false) {\r\n        await axios.post(`http://localhost:3000/tasks/${ele.id}/likes`, {status: true}, {\r\n            headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            },\r\n            withCredentials: true,\r\n        });\r\n        state.likes[taskId].status === true;\r\n    }\r\n    else {\r\n        await axios.post(`http://localhost:3000/tasks/${ele.id}/likes`, {status: false}, {\r\n            headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json;charset=UTF-8\",\r\n            },\r\n            withCredentials: true,\r\n        });\r\n        state.likes[taskId].status === false;\r\n    }\r\n}\r\n\r\nonMounted( async() => {\r\n    const response = await axios.get('http://localhost:3000/tasks', {withCredentials: true});\r\n    tasks.value = response.data;\r\n    state.tasks = (response.data)\r\n\r\n    let count = 0;\r\n    state.tasks.forEach(async(ele) => {\r\n        const commentsLink = `http://localhost:3000/tasks/${ele.id}/comments`;\r\n        const likesLink = `http://localhost:3000/tasks/${ele.id}/likes`;\r\n\r\n        const requestComments = axios.get(commentsLink, {withCredentials: true});\r\n        const requestLikes = axios.get(likesLink, {withCredentials: true});\r\n\r\n        await axios.all([requestComments, requestLikes]).then(\r\n            axios.spread((...responses) => {\r\n            state.comments[ele.id] = responses[0];\r\n            state.likes[ele.id] = responses[1];\r\n            })\r\n        );\r\n\r\n        console.log(state.comments);\r\n        console.log(state.likes);\r\n\r\n\r\n\r\n        // const response = await axios.get(\r\n        //     `http://localhost:3000/tasks/${ele.id}/comments`, \r\n        //     {withCredentials: true}\r\n        // );\r\n        // state.comments[ele.id] = response.data;\r\n        // console.log(state.comments[ele.id]);\r\n    })\r\n\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.liked {\r\n    color: dodgerblue;\r\n}\r\n\r\n.unliked {\r\n    color: darkgray;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}